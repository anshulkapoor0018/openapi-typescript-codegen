{{>header}}

{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from 'sdk/src/api/models/Interfaces/GluonInterfaces/{{{this}}}';
{{/each}}
{{/if}}

import { ErrorResult } from "sdk/src/api/models/Interfaces/Repository/ErrorResult";
import { BaseResult } from "sdk/src/api/models/Interfaces/Repository/BaseResult";
import { catchError } from 'sdk/src/api/core/ApiError';
import { request as __request } from 'sdk/src/api/core/request';
import { AuthHandler } from "sdk/src/utilities/classes/AuthHandler";

{{#each operations}}
	/**
	{{#if parameters}}
	{{#each parameters}}
		{{#if name}}
			{{#notEquals name 'userId'}}
	 			* @param { {{{type}}} } {{{name}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	 		{{/notEquals}}
		{{/if}}
	{{/each}}
	{{/if}}
	 */
	export interface {{{name}}}Params {
		{{#each parameters}}
			{{#if name}}
				{{#notEquals name 'userId'}}
					{{{name}}}{{>isRequired}}: {{type}};
				{{/notEquals}}
			{{/if}}
		{{/each}}
	}

{{/each}}

export class {{{name}}}{{{@root.postfix}}} {
	private userId: string;
	constructor() {
		this.userId = AuthHandler.userId;
	}

	{{#each operations}}
	/**
	 * @param { {{{name}}}Params } object
	{{#each results}}
	 * @returns {{{type}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	 * @throws ApiError
	 */

	public async {{{name}}}({
		{{#each parameters}}
			{{#if name}}
				{{#notEquals name 'userId'}}
					{{#if default}}
						{{{name}}} = {{{default}}},
					{{else}}
						{{{name}}},
					{{/if}}
				{{/notEquals}}
			{{/if}}
		{{/each}}
	}  : {{{name}}}Params ): Promise<BaseResult<{{>result}} | ErrorResult>> {
		const result = await __request({
			method: '{{{method}}}',
			path: `{{#replace "userId" "this.userId"}}{{#replace "{" "${"}}{{{path}}}{{/replace}}{{/replace}}`,
			{{#if parametersQuery}}
			query: {
				{{#each parametersQuery}}
				'{{{prop}}}': {{#replace "userId" "this.userId"}}{{{name}}}{{/replace}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersBody}}
			{{#equals parametersBody.in 'body'}}
			body: {{{parametersBody.name}}},
			{{/equals}}
			{{/if}}
		});

		if (!result.ok) {
            catchError(result as BaseResult<ErrorResult>);
        }
        return result as BaseResult<{{>result}}>;
	}

	{{/each}}
}
