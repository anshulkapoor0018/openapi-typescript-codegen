{{>header}}

{{#equals @root.httpClient 'angular'}}
{{#if @root.exportClient}}
import { Injectable } from '@angular/core';
import type { Observable } from 'rxjs';
{{else}}
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import type { Observable } from 'rxjs';
{{/if}}

{{/equals}}
{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}';
{{/each}}

{{/if}}
{{#notEquals @root.httpClient 'angular'}}
{{!-- import type { CancelablePromise } from '../core/CancelablePromise'; --}}
{{/notEquals}}
{{#if @root.exportClient}}
{{#equals @root.httpClient 'angular'}}
import { BaseHttpRequest } from '../core/BaseHttpRequest';
{{else}}
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
{{/equals}}
{{else}}
import { IErrorResult } from 'sdk/src/api-old/models/iRepository/IResponses/IResults.ts/IErrorResult';
import { IBaseResult } from 'sdk/src/api-old/models/iRepository/IResponses/IResults.ts/IBaseResult';
import { catchError } from 'sdk/src/api-old/core/ApiError';
import { request as __request } from 'sdk/src/api-old/core/request';

{{/if}}

{{#equals @root.httpClient 'angular'}}
@Injectable({
	providedIn: 'root',
})
{{/equals}}
export class {{{name}}}{{{@root.postfix}}} {
	private token: string
    private userId: string
	constructor(token: string, userId: string) {
        this.token = token
        this.userId = userId
    }

	{{#if @root.exportClient}}

	constructor(public readonly httpRequest: BaseHttpRequest) {}
	{{else}}
	{{#equals @root.httpClient 'angular'}}

	constructor(public readonly http: HttpClient) {}
	{{/equals}}
	{{/if}}

	{{#each operations}}
	/**
	{{#if deprecated}}
	 * @deprecated
	{{/if}}
	{{#if summary}}
	 * {{{escapeComment summary}}}
	{{/if}}
	{{#if description}}
	 * {{{escapeComment description}}}
	{{/if}}
	{{#unless @root.useOptions}}
	{{#if parameters}}
	{{#each parameters}}
	 * @param {{{name}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	{{/if}}
	{{/unless}}
	{{#each results}}
	 * @returns {{{type}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	 * @throws ApiError
	 */
	
	public async {{{name}}}({{>parameters}}): Promise<IBaseResult<{{>result}} | IErrorResult>> {
		const result = await __request({
			method: '{{{method}}}',
			path: `{{#replace "{userId}" "${this.userId}"}}{{{path}}}{{/replace}}`,
			token: this.token,
			{{#if parametersQuery}}
			query: {
				{{#each parametersQuery}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersBody}}
			{{#equals parametersBody.in 'body'}}
			body: {{{parametersBody.name}}},
			{{/equals}}
			{{/if}}
		});

		if (!result.ok) {
            catchError(result as IBaseResult<IErrorResult>);
        }
        return result as IBaseResult<{{>result}}>;
	}

	{{/each}}
}
